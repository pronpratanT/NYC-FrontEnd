'use client';

import { useState } from 'react';
import {
  FaTachometerAlt, FaBook, FaCar, FaTools, FaDesktop, FaWrench, FaClipboardCheck,
  FaCreditCard, FaServer, FaBoxOpen, FaShoppingCart, FaCog, FaQuestionCircle,
  FaSignOutAlt, FaChevronDown, FaLink, FaLeaf, FaDownload, FaCode, FaClock, FaChartLine,
  FaKey
} from 'react-icons/fa';
import { RiDashboardFill } from "react-icons/ri";
import { BsPersonFillGear } from "react-icons/bs";
import { HiUserGroup } from "react-icons/hi2";
import Link from 'next/link';

// Updated green palette with #0f9015 as main color
const GREEN_DARK = '#0f9015';   // Main green color
const GREEN_MED = '#2D5F47';    // Rich medium green
const GREEN_LIGHT = '#D4E6DA';  // Soft sage
const GREEN_EXTRA_LIGHT = '#F0F8F2'; // Very light mint
const CREAM_ACCENT = '#F5F2E8'; // Cream accent like collar/cuffs

const menu = [
  { label: 'Dashboard', icon: RiDashboardFill },
  { label: 'คู่มือการใช้งาน', icon: FaBook },
];

const system = [
  { label: 'ระบบจัดการเครื่องจักร', icon: FaTools },
  { label: 'ระบบจัดการรถยนต์ NYC', icon: FaCar },
  { label: 'ระบบแจ้งงาน ECONS', icon: FaTools },
  { label: 'ระบบแจ้งงาน IT Support', icon: FaDesktop },
  { label: 'ระบบแจ้งซ่อมบำรุง', icon: FaWrench },
  { label: 'ระบบตรวจสอบมาตรฐานการผลิต', icon: FaClipboardCheck },
];

const programs = [
  { label: 'FeetCard', icon: FaCreditCard },
  { label: 'N.Y.C. Server IS', icon: FaServer },
  { label: 'Packing Check', icon: FaBoxOpen },
  { label: 'ระบบจัดซื้อ', icon: FaShoppingCart },
  { label: 'เชื่อมโยงแอปฯ', icon: FaLink },
  { label: 'Emerald Website', icon: FaLeaf },
  { label: 'Download YT', icon: FaDownload },
  { label: 'IT Service API', icon: FaCode },
  { label: 'คู่มือ OT', icon: FaClock },
  { label: 'คู่มือแผนการผลิต', icon: FaChartLine },
];

const general = [
  { label: 'Settings', icon: FaCog },
  { label: 'Help', icon: FaQuestionCircle },
  { label: 'Logout', icon: FaSignOutAlt },
];

const admin = [
  { label: 'จัดการข้อมูลพนักงาน', icon: BsPersonFillGear, href: '/user' },
  { label: 'กำหนดสิทธิแผนก', icon: HiUserGroup, href: '/admin' },
  { label: 'Tokens', icon: FaKey, href: '/token' },
  // เพิ่มเมนูอื่น ๆ ได้ง่าย
];

export default function Sidebar() {
  const [showSystem, setShowSystem] = useState(false);
  const [showPrograms, setShowPrograms] = useState(false);
  const [showAdmin, setShowAdmin] = useState(false);
  const [activeLabel, setActiveLabel] = useState<string>('Dashboard');

  const handleClick = (label: string) => setActiveLabel(label);

  const renderItem = (item: { label: string; icon: any; href?: string }, key: string) => {
    const isActive = activeLabel === item.label;
    const Icon = item.icon;
    const commonClass = `group relative w-full flex items-center gap-3 px-4 py-3 rounded-xl transition-all duration-200 text-sm text-left outline-none
      ${isActive ? 'text-[#0f9015] font-semibold bg-[#D4E6DA]' : 'text-gray-500 hover:text-[#0f9015] hover:bg-[#F0F8F2]'}
      focus:ring-2 focus:ring-[#0f9015]/20`;

    if (item.href) {
      return (
        <Link href={item.href} key={key} className={commonClass} onClick={() => handleClick(item.label)} aria-pressed={isActive}>
          <div className={`absolute left-0 top-1/2 -translate-y-1/2 w-2 h-6 rounded-r-full transition-all duration-200 ${isActive ? 'bg-gradient-to-b from-[#0f9015] to-[#2D5F47] shadow-sm' : 'bg-transparent'}`} />
          <span className={`text-lg transition-all duration-200 ${isActive ? 'text-[#0f9015]' : 'text-gray-400 group-hover:text-[#0f9015]'}`}>
            <Icon />
          </span>
          <span className="truncate">{item.label}</span>
        </Link>
      );
    }
    // Default button
    return (
      <button
        key={key}
        onClick={() => handleClick(item.label)}
        aria-pressed={isActive}
        className={`group relative w-full flex items-center gap-3 px-4 py-3 rounded-xl transition-all duration-200 text-sm text-left outline-none
          ${isActive
            ? 'text-[#0f9015] font-semibold bg-[#D4E6DA]'
            : 'text-gray-500 hover:text-[#0f9015] hover:bg-[#F0F8F2]'}
          focus:ring-2 focus:ring-[#0f9015]/20
        `}
      >
        <div className={`absolute left-0 top-1/2 -translate-y-1/2 w-2 h-6 rounded-r-full transition-all duration-200 ${
          isActive ? 'bg-gradient-to-b from-[#0f9015] to-[#2D5F47] shadow-sm' : 'bg-transparent'
        }`} />
        <span className={`text-lg transition-all duration-200 ${
          isActive ? 'text-[#0f9015]' : 'text-gray-400 group-hover:text-[#0f9015]'
        }`}>
          <Icon />
        </span>
        <span className="truncate">{item.label}</span>
      </button>
    );
  };

  const renderSectionButton = (icon: any, title: string, isExpanded: boolean, onClick: () => void) => {
    const Icon = icon;
    return (
      <button
        onClick={onClick}
        aria-expanded={isExpanded}
        className="group w-full flex items-center justify-between px-3 py-3 text-sm font-semibold text-gray-600 rounded-lg hover:bg-[#F0F8F2] transition-all duration-200"
      >
        <div className="flex items-center gap-3">
          {/* Icon main green color */}
          <span className="text-[#0f9015] text-base">
            <Icon />
          </span>
          <span>{title}</span>
        </div>
        <FaChevronDown 
          className={`text-xs transition-transform duration-200 text-gray-400 ${
            isExpanded ? 'rotate-180' : ''
          }`} 
        />
      </button>
    );
  };

  return (
    <aside className="fixed left-6 top-6 h-[calc(100vh-3rem)] w-72 bg-white border border-[#D4E6DA] rounded-2xl flex flex-col z-40 shadow-xl">
      
      {/* Header */}
      <div className="px-5 py-5 flex items-center gap-4" style={{ borderBottom: `1px solid ${GREEN_LIGHT}` }}>
        <div className="w-12 h-12 rounded-xl flex items-center justify-center shadow-lg" style={{
          background: `linear-gradient(135deg, ${GREEN_DARK} 0%, ${GREEN_MED} 100%)`,
        }}>
          <span className="text-lg font-bold text-white">N</span>
        </div>
        <div>
          <div className="text-lg font-bold" style={{ color: GREEN_DARK }}>NYC</div>
          <div className="text-xs text-gray-500">System</div>
        </div>
      </div>

      {/* Navigation with custom scrollbar */}
      <nav className="flex-1 overflow-y-auto px-4 py-4 space-y-6 scrollbar-thin scrollbar-thumb-[#2D5F47] scrollbar-track-[#F0F8F2] hover:scrollbar-thumb-[#0f9015]">
        
        {/* Menu Section */}
        <section>
          <div className="px-2 mb-3 text-xs font-semibold text-gray-400 uppercase tracking-wide">Menu</div>
          <div className="space-y-1">
            {menu.map((m, i) => renderItem(m, `menu-${i}`))}
          </div>
        </section>

        {/* Divider */}
        <div className="border-t border-gray-200" />

        {/* System Section */}
        <section>
          {renderSectionButton(FaTools, 'System', showSystem, () => setShowSystem(!showSystem))}
          <div className={`mt-2 space-y-1 pl-2 transition-all duration-300 ${
            showSystem ? 'max-h-96 opacity-100' : 'max-h-0 opacity-0 overflow-hidden'
          }`}>
            {system.map((s, i) => renderItem(s, `sys-${i}`))}
          </div>
        </section>

        {/* Divider */}
        <div className="border-t border-gray-200" />

        {/* Programs Section */}
        <section>
          {renderSectionButton(FaBoxOpen, 'Programs', showPrograms, () => setShowPrograms(!showPrograms))}
          <div className={`mt-2 space-y-1 pl-2 transition-all duration-300 ${
            showPrograms ? 'max-h-[500px] opacity-100' : 'max-h-0 opacity-0 overflow-hidden'
          }`}>
            {programs.map((p, i) => renderItem(p, `prog-${i}`))}
          </div>
        </section>

        {/* Divider */}
        <div className="border-t border-gray-200" />

        {/* admin Section */}
        <section>
          {renderSectionButton(FaBoxOpen, 'Admin', showAdmin, () => setShowAdmin(!showAdmin))}
          <div className={`mt-2 space-y-1 pl-2 transition-all duration-300 ${
            showAdmin ? 'max-h-[500px] opacity-100' : 'max-h-0 opacity-0 overflow-hidden'
          }`}>
            {admin.map((p, i) => renderItem(p, `admin-${i}`))}
          </div>
        </section>
      </nav>

      {/* General Section */}
      {/* <footer className="px-4 py-4 border-t border-gray-200 bg-white">
        <div className="text-xs font-semibold text-gray-400 mb-3 uppercase tracking-wide">ทั่วไป</div>
        <div className="space-y-1">
          {general.map((g, i) => {
            const Icon = g.icon;
            const isActive = activeLabel === g.label;
            return (
              <button
                key={`gen-${i}`}
                onClick={() => handleClick(g.label)}
                className={`w-full flex items-center gap-3 px-3 py-2 rounded-lg text-sm transition-colors duration-200 ${
                  isActive 
                    ? 'text-[#0f9015] bg-[#D4E6DA] font-medium' 
                    : 'text-gray-500 hover:text-[#0f9015] hover:bg-[#F0F8F2]'
                }`}
              >
                <span className={`text-base ${isActive ? 'text-[#0f9015]' : 'text-gray-400'}`}>
                  <Icon />
                </span>
                <span>{g.label}</span>
              </button>
            );
          })}
        </div>
      </footer> */}

      {/* Custom scrollbar styles */}
      <style jsx>{`
        .scrollbar-thin::-webkit-scrollbar {
          width: 6px;
        }
        .scrollbar-thin::-webkit-scrollbar-track {
          background: #F0F8F2;
          border-radius: 10px;
        }
        .scrollbar-thin::-webkit-scrollbar-thumb {
          background: #2D5F47;
          border-radius: 10px;
        }
        .scrollbar-thin::-webkit-scrollbar-thumb:hover {
          background: #0f9015;
        }
      `}</style>
    </aside>
  );
}