"use client";
import { useEffect, useState } from "react";
import Sidebar from "./components/sidebar";

type User = {
  employee_id: string;
  f_name?: string;
  l_name?: string;
  user_dep?: string;
  email?: string;
  [key: string]: any;
};

type Department = {
  ID: number;
  name: string;
  short_name: string;
}


export default function Page() {
  const [users, setUsers] = useState<User[]>([]);
  const [departments, setDepartments] = useState<Department[]>([]);
  const [selectedDep, setSelectedDep] = useState<string>("all");
  const [error, setError] = useState<string | null>(null);
  const [loading, setLoading] = useState<boolean>(true);

  const positions = ['เจ้าหน้าที่', 'หัวหน้า', 'ผู้จัดการ', 'ผู้อำนวยการ', 'ประธาน'];
  const [userPositions, setUserPositions] = useState<{ [key: string]: string }>({});

  useEffect(() => {
    const fetchData = async () => {
      try {
        setLoading(true);
        setError(null);

        const [resUsers, resDeps] = await Promise.all([
          fetch("/api/proxy/user", { cache: "no-store" }),
          fetch("/api/proxy/user/deps", { cache: "no-store" }),
        ]);

        if (!resUsers.ok) {
          throw new Error(`User API error: HTTP ${resUsers.status} ${resUsers.statusText}`);
        }
        if (!resDeps.ok) {
          throw new Error(`Deps API error: HTTP ${resDeps.status} ${resDeps.statusText}`);
        }

        const dataUsers = await resUsers.json();
        const dataDeps = await resDeps.json();

        const usersArray = Array.isArray(dataUsers) ? dataUsers : dataUsers.data || [];
        const depsArray = Array.isArray(dataDeps) ? dataDeps : dataDeps.data || [];

        setUsers(usersArray);
        setDepartments(depsArray);

        console.log("Users:", usersArray);
        console.log("Departments:", depsArray);

      } catch (err: any) {
        const errorMessage = err.message || "เกิดข้อผิดพลาดในการดึงข้อมูล";
        setError(errorMessage);
        console.error("Failed to fetch data:", err);
      } finally {
        setLoading(false);
      }
    };

    fetchData();
  }, []);

  // กรองข้อมูลพนักงานตามแผนกที่เลือก
  const filteredUsers = selectedDep === "all"
    ? users
    : users.filter((user) => {
      // ตรวจสอบทั้ง user_dep และ Department.name
      return user.user_dep === selectedDep ||
        (user.Department && user.Department.name === selectedDep);
    });

  const handlePositionChange = (userId: string, position: string) => {
    setUserPositions(prev => ({
      ...prev,
      [userId]: position
    }));
  };

  // เช็คว่ามี user ที่ยังไม่มี Department หรือไม่ (เฉพาะแผนกเท่านั้น)
  // const hasUnassignedDepartment = filteredUsers.some(user => {
  //   const departmentName = user.user_dep || user.Department?.name;
  //   // ถ้าไม่มีแผนก หรือเป็น 'ไม่ระบุ' หรือไม่เจอในรายการแผนก
  //   return !departmentName || 
  //          departmentName === 'ไม่ระบุ' || 
  //          !departments.find(d => d.name === departmentName);
  // });

  const hasUnassignedDepartment = selectedDep === "all";

  // Debug: ดูค่าที่ใช้ในการตรวจสอบ
  console.log("hasUnassignedDepartment:", hasUnassignedDepartment);
  console.log("selectedDep:", selectedDep);
  console.log("filteredUsers without dept:", filteredUsers.filter(u => {
    const deptName = u.user_dep || u.Department?.name;
    return !deptName || deptName === 'ไม่ระบุ';
  }));

  //POST
  const handleSave = async () => {
    try {
      for (const user of filteredUsers) {
        const dep = departments.find(d => d.name === (user.user_dep || user.Department?.name));
        if (!dep) {
          console.warn("ไม่พบแผนกสำหรับ user", user);
          continue; // ข้าม user นี้
        }

        const role = userPositions[user.employee_id];
        if (!role) {
          console.log(`ข้าม user ${user.employee_id} เพราะยังไม่ได้เลือกตำแหน่ง`);
          continue; // ถ้ายังไม่เลือกตำแหน่ง → ไม่บันทึก
        }

        const payload = {
          user_id: Number(user.employee_id),
          department_id: dep.ID,
          role_in_department: role,
        };

        console.log("Posting:", payload);

        const res = await fetch('/api/proxy/admin/add-role-department', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(payload),
        });

        if (!res.ok) {
          throw new Error(`HTTP ${res.status} - ${res.statusText}`);
        }
      }

      alert("บันทึกข้อมูลเรียบร้อยแล้ว ✅");
    } catch (err) {
      console.error("Failed to save:", err);
      alert("เกิดข้อผิดพลาดในการบันทึก ❌");
    }
  };

  return (
    <div className="flex min-h-screen bg-gray-50">
      <Sidebar />
      <main className="flex-1 min-h-screen bg-gray-50">
        <div className="container mx-auto px-4 py-8">

          {/* Action Section */}
          {!error && !loading && users.length > 0 && (
            <div className="mb-6 flex flex-col gap-2">

              <div className="flex gap-4 items-center">
                {/* Save button */}
                <button
                  onClick={handleSave}
                  disabled={hasUnassignedDepartment} // เปลี่ยนมาใช้ hasUnassignedDepartment
                  className={`px-4 py-2 rounded-lg shadow transition-colors duration-150 flex items-center gap-2
          ${hasUnassignedDepartment
                      ? "bg-gray-400 cursor-not-allowed"
                      : "bg-green-600 hover:bg-green-700 text-white"}
        `}
                >
                  <svg
                    className="h-4 w-4"
                    fill="none"
                    stroke="currentColor"
                    viewBox="0 0 24 24"
                  >
                    <path
                      strokeLinecap="round"
                      strokeLinejoin="round"
                      strokeWidth="2"
                      d="M12 6v6m0 0v6m0-6h6m-6 0H6"
                    />
                  </svg>
                  บันทึก
                </button>

                {/* Department Select */}
                <select
                  value={selectedDep}
                  onChange={(e) => setSelectedDep(e.target.value)}
                  className="border border-gray-300 rounded-lg px-3 py-2 text-sm shadow-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                >
                  <option value="all">-- เลือกทุกแผนก --</option>
                  {departments.map((dep) => (
                    <option key={dep.ID} value={dep.name}>
                      ({dep.short_name}) {dep.name}
                    </option>
                  ))}
                </select>

                {/* แสดงจำนวนพนักงานที่กรองแล้ว */}
                {selectedDep !== "all" && (
                  <span className="text-sm text-gray-600 bg-blue-50 px-3 py-1 rounded-full">
                    พบ {filteredUsers.length} คน ในแผนก {departments.find(d => d.name === selectedDep)?.short_name}
                  </span>
                )}
              </div>

              {/* Warning message */}
              {hasUnassignedDepartment && ( // เปลี่ยนมาใช้ hasUnassignedDepartment
                <p className="text-sm text-red-600">
                  ⚠️ กรุณาเลือกแผนกก่อนบันทึก
                </p>
              )}

            </div>
          )}


          <div className="bg-white rounded-lg shadow-md overflow-hidden">
            {/* Header */}
            <div className="bg-gradient-to-r from-green-600 to-blue-700 px-6 py-4">
              <h1 className="text-2xl font-bold text-white">กำหนดตำแหน่งพนักงาน</h1>
              <p className="text-blue-100 mt-1">
                {loading ?
                  'กำลังโหลดข้อมูล...' :
                  error ?
                    'เกิดข้อผิดพลาดในการดึงข้อมูล' :
                    selectedDep === "all" ?
                      `พบข้อมูลพนักงาน ${users.length} คนทั้งหมด` :
                      `แสดงพนักงานแผนก ${selectedDep} จำนวน ${filteredUsers.length} คน`
                }
              </p>
            </div>

            {/* Loading */}
            {loading && (
              <div className="flex items-center justify-center p-12">
                <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
                <span className="ml-3 text-gray-600">กำลังโหลดข้อมูล...</span>
              </div>
            )}

            {/* Error Message */}
            {error && (
              <div className="bg-red-50 border-l-4 border-red-400 p-4 m-6">
                <div className="flex">
                  <div className="flex-shrink-0">
                    <svg className="h-5 w-5 text-red-400" viewBox="0 0 20 20" fill="currentColor">
                      <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clipRule="evenodd" />
                    </svg>
                  </div>
                  <div className="ml-3">
                    <p className="text-sm text-red-700">
                      <strong>เกิดข้อผิดพลาด:</strong> {error}
                    </p>
                    <button
                      onClick={() => window.location.reload()}
                      className="mt-2 bg-red-100 hover:bg-red-200 text-red-800 px-3 py-1 rounded text-sm"
                    >
                      รีเฟรชหน้า
                    </button>
                  </div>
                </div>
              </div>
            )}

            {/* Table */}
            {!error && !loading && (
              <div className="overflow-x-auto">
                <table className="min-w-full divide-y divide-gray-200">
                  <thead className="bg-gray-50">
                    <tr>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                        รหัสพนักงาน
                      </th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                        ชื่อ-นามสกุล
                      </th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                        แผนก
                      </th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                        ตำแหน่ง
                      </th>
                      {/* <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      สถานะ
                    </th> */}
                    </tr>
                  </thead>
                  <tbody className="bg-white divide-y divide-gray-200">
                    {filteredUsers.length === 0 ? (
                      <tr>
                        <td colSpan={5} className="px-6 py-12 text-center">
                          <div className="flex flex-col items-center">
                            <svg className="mx-auto h-12 w-12 text-gray-400" stroke="currentColor" fill="none" viewBox="0 0 48 48">
                              <path d="M34 40h10v-4a6 6 0 00-10.712-3.714M34 40H14m20 0v-4a9.971 9.971 0 00-.712-3.714M14 40H4v-4a6 6 0 0110.713-3.714M14 40v-4c0-1.313.253-2.566.713-3.714m0 0A10.003 10.003 0 0124 26c4.21 0 7.813 2.602 9.288 6.286M30 14a6 6 0 11-12 0 6 6 0 0112 0zm12 6a4 4 0 11-8 0 4 4 0 018 0zm-28 0a4 4 0 11-8 0 4 4 0 018 0z" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" />
                            </svg>
                            <h3 className="mt-2 text-sm font-medium text-gray-900">
                              {selectedDep === "all" ? "ไม่มีข้อมูลพนักงาน" : "ไม่มีพนักงานในแผนกนี้"}
                            </h3>
                            <p className="mt-1 text-sm text-gray-500">
                              {selectedDep === "all" ?
                                "ยังไม่มีข้อมูลพนักงานในระบบ" :
                                `ไม่พบข้อมูลพนักงานในแผนก ${selectedDep}`
                              }
                            </p>
                          </div>
                        </td>
                      </tr>
                    ) : (
                      filteredUsers.map((user, index) => (
                        <tr
                          key={user.employee_id || index}
                          className="hover:bg-gray-50 transition-colors duration-150"
                        >
                          <td className="px-6 py-4 whitespace-nowrap">
                            <div className="flex items-center">
                              <div className="flex-shrink-0 h-8 w-8 bg-green-100 rounded-full flex items-center justify-center">
                                <span className="text-sm font-medium text-green-600">
                                  {user.employee_id || (index + 1).toString().padStart(3, '0')}
                                </span>
                              </div>
                            </div>
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap">
                            <div className="text-sm font-medium text-gray-900">
                              {[user.f_name, user.l_name]
                                .filter(Boolean)
                                .join(' ') || '-'}
                            </div>
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap">
                            <span className="inline-flex px-2 py-1 text-xs font-semibold rounded-full bg-blue-100 text-blue-800">
                              {user.user_dep || user.Department?.name || 'ไม่ระบุ'}
                            </span>
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap">
                            <select
                              value={userPositions[user.employee_id || index.toString()] || ''}
                              onChange={(e) => handlePositionChange(user.employee_id || index.toString(), e.target.value)}
                              className="text-sm border border-gray-300 rounded px-2 py-1 focus:ring-2 focus:ring-blue-500 focus:border-blue-500 bg-white"
                            >
                              <option value="" disabled>ตำแหน่ง</option> {/* ค่าเริ่มต้น */}
                              {positions.map((position) => (
                                <option key={position} value={position}>
                                  {position}
                                </option>
                              ))}
                            </select>
                          </td>

                          {/* <td className="px-6 py-4 whitespace-nowrap">
                          <span className="inline-flex px-2 py-1 text-xs font-semibold rounded-full bg-green-100 text-green-800">
                            ใช้งาน
                          </span>
                        </td> */}
                        </tr>
                      ))
                    )}
                  </tbody>
                </table>
              </div>
            )}

            {/* Footer */}
            {!error && !loading && filteredUsers.length > 0 && (
              <div className="bg-gray-50 px-6 py-4 border-t border-gray-200">
                <div className="flex items-center justify-between">
                  <div className="text-sm text-gray-700">
                    {selectedDep === "all" ? (
                      <>แสดง <span className="font-medium">{users.length}</span> รายการทั้งหมด</>
                    ) : (
                      <>
                        แสดง <span className="font-medium">{filteredUsers.length}</span> รายการ
                        จากทั้งหมด <span className="font-medium">{users.length}</span> รายการ
                        ในแผนก <span className="font-medium">{selectedDep}</span>
                      </>
                    )}
                  </div>
                  <div className="text-xs text-gray-500">
                    อัปเดตล่าสุด: {new Date().toLocaleString('th-TH')}
                  </div>
                </div>
              </div>
            )}
          </div>
        </div>
      </main>
    </div>
  );
}